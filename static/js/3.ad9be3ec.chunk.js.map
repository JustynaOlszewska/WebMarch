{"version":3,"sources":["organism/Login.js","organism/AdminPageElementList.js","organism/AdminPage.js"],"names":["fakeAuth","isAuthenticated","authenticate","cb","setTimeout","signout","Login","history","useHistory","from","useLocation","state","pathname","className","onClick","replace","AdminPageElementList","result","name","first","last","large","picture","src","placeholderSrc","alt","effect","draggable","AdminPage","useState","data","setData","permission","setPermission","useEffect","fetch","BASIC_URL","then","response","json","results","catch","error","Error","render","map","index","key","to","PATH_ROUTER","login"],"mappings":"wHAAA,kCAGMA,GAHN,OAGiB,CACfC,iBAAiB,EACjBC,aAFe,SAEFC,GACXH,EAASC,iBAAkB,EAC3BG,WAAWD,EAAI,MAEjBE,QANe,SAMPF,GACNH,EAASC,iBAAkB,EAC3BG,WAAWD,EAAI,QA0BJG,UAtBD,WACZ,IAAIC,EAAUC,cAERC,GADSC,cACSC,OAAS,CAAEF,KAAM,CAAEG,SAAU,YAA/CH,KAON,OACE,yBAAKI,UAAU,gBACb,2GAGA,4BAAQA,UAAU,cAAcC,QAXxB,WACVd,EAASE,cAAa,WACpBK,EAAQQ,QAAQN,QAShB,a,qFCESO,G,OAzBc,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAAa,EACnBA,EAAOC,KAAvBC,EADmC,EACnCA,MAAOC,EAD4B,EAC5BA,KACPC,EAAUJ,EAAOK,QAAjBD,MAER,OACE,4BAAQR,UAAU,aAChB,kBAAC,gBAAD,CACEA,UAAU,mBACVU,IAAKF,EACLG,eAAgBH,EAChBI,IAAI,qBACJC,OAAO,kBACPC,WAAW,IAEb,gCAAYd,UAAU,mBACnBM,EADH,IACWC,M,iBCqBFQ,UAlCG,WAAO,IAAD,EACEC,mBAAS,IADX,mBACfC,EADe,KACTC,EADS,OAEcF,oBAAS,GAFvB,mBAEfG,EAFe,KAEHC,EAFG,KAiBtB,OAbAC,qBAAU,WAENC,MAAMC,KACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACP,GAAD,OAAUC,EAAQD,EAAKU,YAC5BC,OAAM,SAACC,GAEN,MADAT,GAAc,GACR,IAAIU,MAAMD,QAIrB,IAGD,yBAAK7B,UAAU,aACb,kBAAC,IAAD,CACE+B,OAAQ,kBACNZ,EACEF,EAAKe,KAAI,SAAC5B,EAAQ6B,GAAT,OACP,kBAAC,EAAD,CAAsBC,IAAKD,EAAO7B,OAAQA,OAG5C,kBAAC,IAAD,CAAU+B,GAAIC,IAAYC","file":"static/js/3.ad9be3ec.chunk.js","sourcesContent":["import React from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport \"../style/sass/_login.scss\";\nconst fakeAuth = {\n  isAuthenticated: false,\n  authenticate(cb) {\n    fakeAuth.isAuthenticated = true;\n    setTimeout(cb, 100);\n  },\n  signout(cb) {\n    fakeAuth.isAuthenticated = false;\n    setTimeout(cb, 100);\n  },\n};\n\nconst Login = () => {\n  let history = useHistory();\n  let location = useLocation();\n  let { from } = location.state || { from: { pathname: \"/admin\" } };\n  let login = () => {\n    fakeAuth.authenticate(() => {\n      history.replace(from);\n    });\n  };\n\n  return (\n    <div className=\"loginWrapper\">\n      <p>\n        If you want to know the registered users of this website, you need to login.\n      </p>\n      <button className=\"buttonLogin\" onClick={login}>\n        Log in\n      </button>\n    </div>\n  );\n};\n\nexport default Login;\n","import React from \"react\";\r\n\r\nimport { LazyLoadImage } from \"react-lazy-load-image-component\";\r\nimport \"react-lazy-load-image-component/src/effects/black-and-white.css\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst AdminPageElementList = ({ result }) => {\r\n  const { first, last } = result.name;\r\n  const { large } = result.picture;\r\n\r\n  return (\r\n    <figure className=\"dataUsers\">\r\n      <LazyLoadImage\r\n        className=\"dataUsers__image\"\r\n        src={large}\r\n        placeholderSrc={large}\r\n        alt=\"whoReadAboutHealth\"\r\n        effect=\"black-and-white\"\r\n        draggable={false}\r\n      />\r\n      <figcaption className=\"dataUsers__name\">\r\n        {first} {last}\r\n      </figcaption>\r\n    </figure>\r\n  );\r\n};\r\n\r\nAdminPageElementList.propTypes = {\r\n  result: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default AdminPageElementList;\r\n","import React, { useState, useEffect } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nimport AdminPageElementList from \"../organism/AdminPageElementList\";\n\nimport \"./Login.js\";\n\nimport { BASIC_URL, PATH_ROUTER } from \"../constants\";\n\nconst AdminPage = () => {\n  const [data, setData] = useState([]);\n  const [permission, setPermission] = useState(true);\n\n  useEffect(() => {\n    function fetchData() {\n      fetch(BASIC_URL)\n        .then((response) => response.json())\n        .then((data) => setData(data.results))\n        .catch((error) => {\n          setPermission(false);\n          throw new Error(error);\n        });\n    }\n    fetchData();\n  }, []);\n\n  return (\n    <div className=\"listUsers\">\n      <Route\n        render={() =>\n          permission ? (\n            data.map((result, index) => (\n              <AdminPageElementList key={index} result={result} />\n            ))\n          ) : (\n            <Redirect to={PATH_ROUTER.login} />\n          )\n        }\n      />\n    </div>\n  );\n};\n\nexport default AdminPage;\n"],"sourceRoot":""}